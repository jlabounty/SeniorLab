(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     38521,       1002]
NotebookOptionsPosition[     37045,        951]
NotebookOutlinePosition[     37385,        966]
CellTagsIndexPosition[     37342,        963]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "half life of Cs137", Typeset`newq$$ = 
   "half life of Cs137", Typeset`chosen$$ = 
   "IsotopeData[\"Cesium137\", \"HalfLife\"]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = True}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse[
              "half life of Cs137", 
               Defer[
                IsotopeData["Cesium137", "HalfLife"]], "Fast parse"]; 
             Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "half life of Cs137", 
                  Defer[
                   IsotopeData["Cesium137", "HalfLife"]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"IsotopeData", "[", 
                  RowBox[{"\"\<Cesium137\>\"", ",", " ", "\"\<HalfLife\>\""}],
                   "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"IsotopeData", "[", 
                  RowBox[{"\"\<Cesium137\>\"", ",", " ", "\"\<HalfLife\>\""}],
                   "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"IsotopeData", "[", 
                    RowBox[{"\"Cesium137\"", ",", " ", "\"HalfLife\""}], 
                    "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse[
                  "half life of Cs137", 
                   Defer[
                    IsotopeData["Cesium137", "HalfLife"]], "Fast parse"]; 
                 Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "half life of Cs137", 
                    Defer[
                    IsotopeData["Cesium137", "HalfLife"]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"IsotopeData", "[", 
                    
                    RowBox[{"\<\"Cesium137\"\>", ",", 
                    " ", "\<\"HalfLife\"\>"}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"IsotopeData", "[", 
                    RowBox[{"\<\"Cesium137\"\>", ",", 
                    " ", "\<\"HalfLife\"\>"}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"IsotopeData", "[", 
                    RowBox[{"\"Cesium137\"", ",", " ", "\"HalfLife\""}], 
                    "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData["9.486028799999999462215782842`4.*^8"], "Output",
 CellChangeTimes->{{3.684069735606101*^9, 3.684069746275118*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "seconds since 9/23/78", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Output", 
        "Quantity[1.2\[Times]10^9, \"Seconds\"]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              FormBox[
               TagBox[
                FormBox[
                 TemplateBox[{"\"seconds\"", "\"\"", 
                   StyleBox["\" since \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], "\"\"", 
                   FormBox[
                    TagBox["\"Saturday, September 23, 1978\"", Identity], 
                    TraditionalForm]}, "RowDefault"], TraditionalForm], 
                Format[#, TraditionalForm]& ], TraditionalForm], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}, CellSize -> {550, Automatic}]}], 
       
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "Identity", 
     "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["moutput", {}, {"Quantity[1.2\[Times]10^9, \"Seconds\"]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              TagBox[
               TagBox[
                RowBox[{
                  TagBox[
                   RowBox[{"1.2", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "9"]}], 
                   Global`TagBoxWrapper[
                   "StringBoxes" -> RowBox[{"1.2", "\[Times]", 
                    SuperscriptBox["10", "9"]}]], SyntaxForm -> CenterDot], 
                  "\[InvisibleSpace]", " ", 
                  StyleBox[
                  "\"seconds\"", {
                   FontSize -> Smaller, FontFamily -> "Helvetica", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], Identity], #& , SyntaxForm -> 
               Dot], "Unit", SyntaxForm -> Dot], 
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
             ZeroWidthTimes -> False], TraditionalForm]], "Output", {}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata,\
quantitydata"}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "DifferenceConversions", "numsubpods" -> 
     "4", "position" -> "300", "primary" -> "true", "scanner" -> "Date", 
     "title" -> "Time span"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               RowBox[{
                 TagBox["38", #& ], "\[InvisibleSpace]", " ", 
                 StyleBox[
                 "\"years\"", {
                  FontSize -> Smaller, FontFamily -> "Helvetica", 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False]}], "\[InvisibleSpace]", 
               TagBox["  ", 
                Global`TagBoxWrapper["StringBoxes" -> " "]], 
               RowBox[{"\"5\"", "\[InvisibleSpace]", " ", 
                 StyleBox[
                 "\"days\"", {
                  FontSize -> Smaller, FontFamily -> "Helvetica", 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False]}]}]], TraditionalForm]], 
          "Output", {}, CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               RowBox[{"\"1983\"", "\[InvisibleSpace]", " ", 
                 StyleBox[
                 "\"weeks\"", {
                  FontSize -> Smaller, FontFamily -> "Helvetica", 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False]}], "\[InvisibleSpace]", 
               TagBox["  ", 
                Global`TagBoxWrapper["StringBoxes" -> " "]], 
               RowBox[{"\"4\"", "\[InvisibleSpace]", " ", 
                 StyleBox[
                 "\"days\"", {
                  FontSize -> Smaller, FontFamily -> "Helvetica", 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False]}]}]], TraditionalForm]], 
          "Output", {}, CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              TagBox[
               TagBox[
                RowBox[{
                  TagBox["13\[ThinSpace]885", 
                   Global`TagBoxWrapper["StringBoxes" -> "13885"]], 
                  "\[InvisibleSpace]", " ", 
                  StyleBox[
                  "\"days\"", {
                   FontSize -> Smaller, FontFamily -> "Helvetica", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], Identity], #& , SyntaxForm -> 
               Dot], "Unit", SyntaxForm -> Dot], 
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
             ZeroWidthTimes -> False], TraditionalForm]], "Output", {}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              TagBox[
               TagBox[
                RowBox[{
                  TagBox["38.01", 
                   Global`TagBoxWrapper["StringBoxes" -> "38.01"]], 
                  "\[InvisibleSpace]", " ", 
                  StyleBox[
                  "\"years\"", {
                   FontSize -> Smaller, FontFamily -> "Helvetica", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], Identity], #& , SyntaxForm -> 
               Dot], "Unit", SyntaxForm -> Dot], 
             LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
             ZeroWidthTimes -> False], TraditionalForm]], "Output", {}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}]}]\
, Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "DateDifference", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "0.984", "parsetiming" -> "0.278", "parsetimedout" -> "false", 
    "recalculate" -> "", "id" -> 
    "MSPa41051hai2ag1ge7da5f5000045a0214e906a3e27", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "1", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa41061hai2ag1ge7da5f500005bc4dd8652d8ad5d&s=1", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2016, 9, 28, 12, 44, 4.657501`7.420727944883478}, "Line" -> 7, 
    "SessionID" -> 27714003937747462636}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Output", 
    "Quantity[1.2\[Times]10^9, \"Seconds\"]"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "seconds since 9/23/78"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{186., {49., 22.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 TemplateBox[{"1.2`*^9"},
  "QuantityUnit",
  DisplayFunction->(TooltipBox[
    StyleBox[
     RowBox[{#, 
       StyleBox["\"s\"", "QuantityUnitTraditionalLabel"]}], 
     ShowStringCharacters -> False], "Unit: seconds"]& ),
  InterpretationFunction->(RowBox[{"Quantity", "[", 
     RowBox[{#, ",", "\"Seconds\""}], "]"}]& )]], "Output",
 CellChangeTimes->{3.684069844982126*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6840695255636377`*^9, 3.6840695263468323`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"http", ":"}], "//", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"www", ".", "chem", ".", "purdue", ".", "edu"}], "/", 
        "gchelp"}], "/", "howtosolveit"}], "/", "Nuclear"}], "/", 
     RowBox[{"Half_Life", ".", "htm"}]}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"k", " ", "=", " ", 
   RowBox[{"k", " ", "/.", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"Solve", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Log", "[", 
           RowBox[{"50", "/", "100"}], "]"}], " ", "\[Equal]", " ", 
          RowBox[{
           RowBox[{"-", "k"}], "*", 
           RowBox[{"(", 
            RowBox[{"9.486", "*", 
             RowBox[{"10", "^", "8"}]}], ")"}]}]}], ",", "k"}], "]"}], ")"}], 
      "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.684069706397852*^9, 3.6840697839089813`*^9}, {
  3.684070335099111*^9, 3.684070389546954*^9}}],

Cell[BoxData["7.307054401854788`*^-10"], "Output",
 CellChangeTimes->{{3.684069762266604*^9, 3.684069784728294*^9}, {
  3.6840703733112783`*^9, 3.68407039045435*^9}, {3.684070433759511*^9, 
  3.6840704490869093`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"n", " ", "=", " ", 
  RowBox[{
   RowBox[{"n", " ", "*", "\[Mu]Ci"}], "/.", 
   RowBox[{
    RowBox[{
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Log", "[", 
         RowBox[{"n", "/", 
          RowBox[{"(", "300", ")"}]}], "]"}], " ", "\[Equal]", " ", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", "k", ")"}]}], "*", 
         RowBox[{"(", 
          RowBox[{"1.3", "*", 
           RowBox[{"10", "^", "9"}]}], ")"}]}]}], ",", "n"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.684069790733074*^9, 3.684069883323563*^9}, {
  3.684070381878992*^9, 3.684070457120409*^9}}],

Cell[BoxData[
 RowBox[{"116.0319289052072`", " ", "\[Mu]Ci"}]], "Output",
 CellChangeTimes->{
  3.684069883892215*^9, {3.6840703835629883`*^9, 3.684070457785939*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"--", 
    RowBox[{"--", 
     RowBox[{"--", 
      RowBox[{"--", 
       RowBox[{"--", 
        RowBox[{"--", 
         RowBox[{"--", 
          RowBox[{"--", 
           RowBox[{"--", 
            RowBox[{"--", 
             RowBox[{"--", 
              RowBox[{"--", 
               RowBox[{"--", 
                RowBox[{"--", 
                 RowBox[{"--", 
                  RowBox[{"--", 
                   RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{"--", 
                    RowBox[{
                    "--", "-"}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\
]}]}]}]}]}]}]}]}]}]}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.684335044811359*^9, 3.684335052346354*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Aluminum", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IscatAl", "=", " ", 
    RowBox[{"735.724", " ", "*", 
     RowBox[{"photons", " ", "/", " ", "second"}]}]}], "\[IndentingNewLine]", 
   
   RowBox[{"IorigAl", "=", " ", 
    RowBox[{"2014.16", "*", 
     RowBox[{"photons", " ", "/", " ", "second"}]}]}], "\[IndentingNewLine]", 
   
   RowBox[{"\[Rho]Al", " ", "=", " ", 
    RowBox[{"2.70", " ", 
     RowBox[{"gram", "/", " ", 
      RowBox[{"cm", "^", "3"}]}]}]}], " ", "\[IndentingNewLine]", 
   RowBox[{"\[Mu]Al", " ", "=", " ", 
    RowBox[{"0.074", " ", 
     RowBox[{
      RowBox[{"cm", "^", "2"}], " ", "/", " ", "gram"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.6843350574582167`*^9, 3.684335085390773*^9}, {
  3.684335153768656*^9, 3.684335174414392*^9}, {3.684335337160852*^9, 
  3.684335345978096*^9}, {3.684335399353676*^9, 3.684335434518682*^9}, {
  3.684335502507834*^9, 3.684335525292592*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"735.724`", " ", "photons"}], "second"]], "Output",
 CellChangeTimes->{3.684335435273994*^9, 3.684335510028246*^9, 
  3.684335548707008*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{"2014.16`", " ", "photons"}], "second"]], "Output",
 CellChangeTimes->{3.684335435273994*^9, 3.684335510028246*^9, 
  3.684335548710165*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{"2.7`", " ", "gram"}], 
  SuperscriptBox["cm", "3"]]], "Output",
 CellChangeTimes->{3.684335435273994*^9, 3.684335510028246*^9, 
  3.684335548712944*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{"0.074`", " ", 
   SuperscriptBox["cm", "2"]}], "gram"]], "Output",
 CellChangeTimes->{3.684335435273994*^9, 3.684335510028246*^9, 
  3.6843355487154617`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"IscatAl", " ", "\[Equal]", " ", 
    RowBox[{"IorigAl", "*", 
     RowBox[{"E", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "\[Mu]Al"}], "*", "\[Rho]Al", "*", "dAl"}], ")"}]}]}]}], 
   ",", "dAl"}], "]"}]], "Input",
 CellChangeTimes->{{3.684335439743787*^9, 3.684335483829628*^9}, {
  3.684335533752203*^9, 3.684335552994804*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "ifun"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Inverse functions are being used by \
\[NoBreak]\\!\\(Solve\\)\[NoBreak], so some solutions may not be found; use \
Reduce for complete solution information. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Solve/ifun\\\", ButtonNote -> \
\\\"Solve::ifun\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6843355535078077`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"dAl", "\[Rule]", 
    RowBox[{"5.040552880965797`", " ", "cm"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.684335484436104*^9, {3.68433554673779*^9, 3.6843355535109873`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", "Copper", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"IscatCu", "=", " ", 
    RowBox[{"735.724", " ", "*", 
     RowBox[{"photons", " ", "/", " ", "second"}]}]}], "\[IndentingNewLine]", 
   
   RowBox[{"IorigCu", "=", " ", 
    RowBox[{"2014.16", "*", 
     RowBox[{"photons", " ", "/", " ", "second"}]}]}], "\[IndentingNewLine]", 
   
   RowBox[{"\[Rho]Cu", " ", "=", " ", 
    RowBox[{"8.96", " ", 
     RowBox[{"gram", "/", " ", 
      RowBox[{"cm", "^", "3"}]}]}]}], " ", "\[IndentingNewLine]", 
   RowBox[{"\[Mu]Cu", " ", "=", " ", 
    RowBox[{"0.072", " ", 
     RowBox[{
      RowBox[{"cm", "^", "2"}], " ", "/", " ", "gram"}]}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{"IscatCu", " ", "\[Equal]", " ", 
      RowBox[{"IorigCu", "*", 
       RowBox[{"E", "^", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "\[Mu]Cu"}], "*", "\[Rho]Cu", "*", "dCu"}], 
         ")"}]}]}]}], ",", "dCu"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6843355592289248`*^9, 3.684335626596917*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"735.724`", " ", "photons"}], "second"]], "Output",
 CellChangeTimes->{3.684335597139254*^9, 3.684335632513863*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{"2014.16`", " ", "photons"}], "second"]], "Output",
 CellChangeTimes->{3.684335597139254*^9, 3.6843356325169363`*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{"8.96`", " ", "gram"}], 
  SuperscriptBox["cm", "3"]]], "Output",
 CellChangeTimes->{3.684335597139254*^9, 3.6843356325194683`*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{"0.072`", " ", 
   SuperscriptBox["cm", "2"]}], "gram"]], "Output",
 CellChangeTimes->{3.684335597139254*^9, 3.684335632521461*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "ifun"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Inverse functions are being used by \
\[NoBreak]\\!\\(Solve\\)\[NoBreak], so some solutions may not be found; use \
Reduce for complete solution information. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Solve/ifun\\\", ButtonNote -> \
\\\"Solve::ifun\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.684335597148429*^9, 3.6843356325237427`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"dCu", "\[Rule]", 
    RowBox[{"1.5611087326651882`", " ", "cm"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.684335597139254*^9, 3.684335632526338*^9}]
}, Open  ]]
},
WindowSize->{931, 1027},
WindowMargins->{{Automatic, -10}, {Automatic, -10}},
FrontEndVersion->"9.0 for Linux x86 (64-bit) (November 20, 2012)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 16100, 392, 71, "WolframAlphaShortInput"],
Cell[16682, 416, 128, 1, 34, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16847, 422, 10484, 227, 88, "WolframAlphaShortInput"],
Cell[27334, 651, 394, 10, 34, "Output"]
}, Open  ]],
Cell[27743, 664, 96, 1, 32, "Input"],
Cell[CellGroupData[{
Cell[27864, 669, 1063, 32, 55, "Input"],
Cell[28930, 703, 217, 3, 34, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29184, 711, 730, 21, 32, "Input"],
Cell[29917, 734, 166, 3, 32, "Output"]
}, Open  ]],
Cell[30098, 740, 1355, 41, 55, "Input"],
Cell[CellGroupData[{
Cell[31478, 785, 978, 23, 121, "Input"],
Cell[32459, 810, 178, 4, 49, "Output"],
Cell[32640, 816, 178, 4, 49, "Output"],
Cell[32821, 822, 191, 5, 51, "Output"],
Cell[33015, 829, 196, 5, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33248, 839, 410, 11, 32, "Input"],
Cell[33661, 852, 533, 11, 43, "Message"],
Cell[34197, 865, 240, 6, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34474, 876, 1123, 30, 165, "Input"],
Cell[35600, 908, 153, 3, 49, "Output"],
Cell[35756, 913, 155, 3, 49, "Output"],
Cell[35914, 918, 169, 4, 51, "Output"],
Cell[36086, 924, 169, 4, 54, "Output"],
Cell[36258, 930, 555, 11, 43, "Message"],
Cell[36816, 943, 213, 5, 89, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
